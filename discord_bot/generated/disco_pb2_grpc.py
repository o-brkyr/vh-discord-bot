# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from generated import disco_pb2 as disco__pb2


class DiscoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnPlayerJoin = channel.unary_unary(
            "/Disco/OnPlayerJoin",
            request_serializer=disco__pb2.PlayerRequest.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnPlayerLeave = channel.unary_unary(
            "/Disco/OnPlayerLeave",
            request_serializer=disco__pb2.PlayerRequest.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerSave = channel.unary_unary(
            "/Disco/OnServerSave",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerStart = channel.unary_unary(
            "/Disco/OnServerStart",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerStarted = channel.unary_unary(
            "/Disco/OnServerStarted",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerStop = channel.unary_unary(
            "/Disco/OnServerStop",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerStopped = channel.unary_unary(
            "/Disco/OnServerStopped",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.OnServerLastOrders = channel.unary_unary(
            "/Disco/OnServerLastOrders",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.Empty.FromString,
        )
        self.GetDaySchedule = channel.unary_stream(
            "/Disco/GetDaySchedule",
            request_serializer=disco__pb2.ScheduleRequest.SerializeToString,
            response_deserializer=disco__pb2.ScheduleMessage.FromString,
        )
        self.GetWeekSchedule = channel.unary_stream(
            "/Disco/GetWeekSchedule",
            request_serializer=disco__pb2.Empty.SerializeToString,
            response_deserializer=disco__pb2.ScheduleMessage.FromString,
        )
        self.SetDaySchedule = channel.unary_unary(
            "/Disco/SetDaySchedule",
            request_serializer=disco__pb2.ScheduleMessage.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.ClearDaySchedule = channel.unary_unary(
            "/Disco/ClearDaySchedule",
            request_serializer=disco__pb2.ScheduleRequest.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.QueryPlayers = channel.unary_stream(
            "/Disco/QueryPlayers",
            request_serializer=disco__pb2.Empty.SerializeToString,
            response_deserializer=disco__pb2.QueryResponse.FromString,
        )
        self.QueryStatus = channel.unary_unary(
            "/Disco/QueryStatus",
            request_serializer=disco__pb2.Empty.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.DoServerStart = channel.unary_unary(
            "/Disco/DoServerStart",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.DoServerShutdown = channel.unary_unary(
            "/Disco/DoServerShutdown",
            request_serializer=disco__pb2.WithTime.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.DoRegisterMember = channel.unary_unary(
            "/Disco/DoRegisterMember",
            request_serializer=disco__pb2.RegisterRequest.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )
        self.DoRegisterCharacter = channel.unary_unary(
            "/Disco/DoRegisterCharacter",
            request_serializer=disco__pb2.RegisterRequest.SerializeToString,
            response_deserializer=disco__pb2.ResultResponse.FromString,
        )


class DiscoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnPlayerJoin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnPlayerLeave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerStarted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerStopped(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OnServerLastOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetDaySchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWeekSchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetDaySchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ClearDaySchedule(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def QueryStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DoServerStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DoServerShutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DoRegisterMember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DoRegisterCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DiscoServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "OnPlayerJoin": grpc.unary_unary_rpc_method_handler(
            servicer.OnPlayerJoin,
            request_deserializer=disco__pb2.PlayerRequest.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnPlayerLeave": grpc.unary_unary_rpc_method_handler(
            servicer.OnPlayerLeave,
            request_deserializer=disco__pb2.PlayerRequest.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerSave": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerSave,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerStart": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerStart,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerStarted": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerStarted,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerStop": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerStop,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerStopped": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerStopped,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "OnServerLastOrders": grpc.unary_unary_rpc_method_handler(
            servicer.OnServerLastOrders,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.Empty.SerializeToString,
        ),
        "GetDaySchedule": grpc.unary_stream_rpc_method_handler(
            servicer.GetDaySchedule,
            request_deserializer=disco__pb2.ScheduleRequest.FromString,
            response_serializer=disco__pb2.ScheduleMessage.SerializeToString,
        ),
        "GetWeekSchedule": grpc.unary_stream_rpc_method_handler(
            servicer.GetWeekSchedule,
            request_deserializer=disco__pb2.Empty.FromString,
            response_serializer=disco__pb2.ScheduleMessage.SerializeToString,
        ),
        "SetDaySchedule": grpc.unary_unary_rpc_method_handler(
            servicer.SetDaySchedule,
            request_deserializer=disco__pb2.ScheduleMessage.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "ClearDaySchedule": grpc.unary_unary_rpc_method_handler(
            servicer.ClearDaySchedule,
            request_deserializer=disco__pb2.ScheduleRequest.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "QueryPlayers": grpc.unary_stream_rpc_method_handler(
            servicer.QueryPlayers,
            request_deserializer=disco__pb2.Empty.FromString,
            response_serializer=disco__pb2.QueryResponse.SerializeToString,
        ),
        "QueryStatus": grpc.unary_unary_rpc_method_handler(
            servicer.QueryStatus,
            request_deserializer=disco__pb2.Empty.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "DoServerStart": grpc.unary_unary_rpc_method_handler(
            servicer.DoServerStart,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "DoServerShutdown": grpc.unary_unary_rpc_method_handler(
            servicer.DoServerShutdown,
            request_deserializer=disco__pb2.WithTime.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "DoRegisterMember": grpc.unary_unary_rpc_method_handler(
            servicer.DoRegisterMember,
            request_deserializer=disco__pb2.RegisterRequest.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
        "DoRegisterCharacter": grpc.unary_unary_rpc_method_handler(
            servicer.DoRegisterCharacter,
            request_deserializer=disco__pb2.RegisterRequest.FromString,
            response_serializer=disco__pb2.ResultResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Disco", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Disco(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnPlayerJoin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnPlayerJoin",
            disco__pb2.PlayerRequest.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnPlayerLeave(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnPlayerLeave",
            disco__pb2.PlayerRequest.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerSave(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerSave",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerStart(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerStart",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerStarted(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerStarted",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerStop(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerStop",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerStopped(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerStopped",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OnServerLastOrders(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/OnServerLastOrders",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetDaySchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Disco/GetDaySchedule",
            disco__pb2.ScheduleRequest.SerializeToString,
            disco__pb2.ScheduleMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetWeekSchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Disco/GetWeekSchedule",
            disco__pb2.Empty.SerializeToString,
            disco__pb2.ScheduleMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetDaySchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/SetDaySchedule",
            disco__pb2.ScheduleMessage.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ClearDaySchedule(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/ClearDaySchedule",
            disco__pb2.ScheduleRequest.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryPlayers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Disco/QueryPlayers",
            disco__pb2.Empty.SerializeToString,
            disco__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def QueryStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/QueryStatus",
            disco__pb2.Empty.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DoServerStart(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/DoServerStart",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DoServerShutdown(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/DoServerShutdown",
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DoRegisterMember(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/DoRegisterMember",
            disco__pb2.RegisterRequest.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DoRegisterCharacter(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Disco/DoRegisterCharacter",
            disco__pb2.RegisterRequest.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
