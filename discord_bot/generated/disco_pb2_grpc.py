# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import disco_pb2 as disco__pb2


class DiscoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnPlayerJoin = channel.unary_unary(
                '/Disco/OnPlayerJoin',
                request_serializer=disco__pb2.WithUserIDAndTime.SerializeToString,
                response_deserializer=disco__pb2.Empty.FromString,
                )
        self.OnPlayerLeave = channel.unary_unary(
                '/Disco/OnPlayerLeave',
                request_serializer=disco__pb2.WithUserIDAndTime.SerializeToString,
                response_deserializer=disco__pb2.Empty.FromString,
                )
        self.OnServerSave = channel.unary_unary(
                '/Disco/OnServerSave',
                request_serializer=disco__pb2.WithTime.SerializeToString,
                response_deserializer=disco__pb2.Empty.FromString,
                )
        self.OnServerStart = channel.unary_unary(
                '/Disco/OnServerStart',
                request_serializer=disco__pb2.WithTime.SerializeToString,
                response_deserializer=disco__pb2.Empty.FromString,
                )
        self.OnServerShutdown = channel.unary_unary(
                '/Disco/OnServerShutdown',
                request_serializer=disco__pb2.WithTime.SerializeToString,
                response_deserializer=disco__pb2.Empty.FromString,
                )
        self.DoServerStart = channel.unary_unary(
                '/Disco/DoServerStart',
                request_serializer=disco__pb2.WithTime.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )
        self.DoServerShutdown = channel.unary_unary(
                '/Disco/DoServerShutdown',
                request_serializer=disco__pb2.WithTime.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )
        self.DoWhitelistPlayer = channel.unary_unary(
                '/Disco/DoWhitelistPlayer',
                request_serializer=disco__pb2.WithUserID.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )
        self.RecieveEvent = channel.unary_unary(
                '/Disco/RecieveEvent',
                request_serializer=disco__pb2.Event.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )
        self.RegisterMember = channel.unary_unary(
                '/Disco/RegisterMember',
                request_serializer=disco__pb2.RegisterMessage.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )
        self.RegisterCharacter = channel.unary_unary(
                '/Disco/RegisterCharacter',
                request_serializer=disco__pb2.RegisterMessage.SerializeToString,
                response_deserializer=disco__pb2.ResultResponse.FromString,
                )


class DiscoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnPlayerJoin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnPlayerLeave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnServerSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnServerStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnServerShutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoServerStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoServerShutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoWhitelistPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecieveEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterMember(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterCharacter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnPlayerJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.OnPlayerJoin,
                    request_deserializer=disco__pb2.WithUserIDAndTime.FromString,
                    response_serializer=disco__pb2.Empty.SerializeToString,
            ),
            'OnPlayerLeave': grpc.unary_unary_rpc_method_handler(
                    servicer.OnPlayerLeave,
                    request_deserializer=disco__pb2.WithUserIDAndTime.FromString,
                    response_serializer=disco__pb2.Empty.SerializeToString,
            ),
            'OnServerSave': grpc.unary_unary_rpc_method_handler(
                    servicer.OnServerSave,
                    request_deserializer=disco__pb2.WithTime.FromString,
                    response_serializer=disco__pb2.Empty.SerializeToString,
            ),
            'OnServerStart': grpc.unary_unary_rpc_method_handler(
                    servicer.OnServerStart,
                    request_deserializer=disco__pb2.WithTime.FromString,
                    response_serializer=disco__pb2.Empty.SerializeToString,
            ),
            'OnServerShutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.OnServerShutdown,
                    request_deserializer=disco__pb2.WithTime.FromString,
                    response_serializer=disco__pb2.Empty.SerializeToString,
            ),
            'DoServerStart': grpc.unary_unary_rpc_method_handler(
                    servicer.DoServerStart,
                    request_deserializer=disco__pb2.WithTime.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
            'DoServerShutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.DoServerShutdown,
                    request_deserializer=disco__pb2.WithTime.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
            'DoWhitelistPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.DoWhitelistPlayer,
                    request_deserializer=disco__pb2.WithUserID.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
            'RecieveEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RecieveEvent,
                    request_deserializer=disco__pb2.Event.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
            'RegisterMember': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterMember,
                    request_deserializer=disco__pb2.RegisterMessage.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
            'RegisterCharacter': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCharacter,
                    request_deserializer=disco__pb2.RegisterMessage.FromString,
                    response_serializer=disco__pb2.ResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Disco', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Disco(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnPlayerJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/OnPlayerJoin',
            disco__pb2.WithUserIDAndTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnPlayerLeave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/OnPlayerLeave',
            disco__pb2.WithUserIDAndTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnServerSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/OnServerSave',
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnServerStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/OnServerStart',
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnServerShutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/OnServerShutdown',
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoServerStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/DoServerStart',
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoServerShutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/DoServerShutdown',
            disco__pb2.WithTime.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoWhitelistPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/DoWhitelistPlayer',
            disco__pb2.WithUserID.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecieveEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/RecieveEvent',
            disco__pb2.Event.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/RegisterMember',
            disco__pb2.RegisterMessage.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterCharacter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Disco/RegisterCharacter',
            disco__pb2.RegisterMessage.SerializeToString,
            disco__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
